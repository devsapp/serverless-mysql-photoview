import {
  require_react
} from "./chunk-KRWLW7CN.js";
import {
  __toESM
} from "./chunk-QOVRSCHT.js";

// node_modules/react-blurhash/es/Blurhash.js
var React2 = __toESM(require_react());

// node_modules/react-blurhash/es/BlurhashCanvas.js
var React = __toESM(require_react());

// node_modules/blurhash/dist/esm/base83.js
var digitCharacters = [
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "#",
  "$",
  "%",
  "*",
  "+",
  ",",
  "-",
  ".",
  ":",
  ";",
  "=",
  "?",
  "@",
  "[",
  "]",
  "^",
  "_",
  "{",
  "|",
  "}",
  "~"
];
var decode83 = (str) => {
  let value = 0;
  for (let i = 0; i < str.length; i++) {
    const c = str[i];
    const digit = digitCharacters.indexOf(c);
    value = value * 83 + digit;
  }
  return value;
};

// node_modules/blurhash/dist/esm/utils.js
var sRGBToLinear = (value) => {
  let v = value / 255;
  if (v <= 0.04045) {
    return v / 12.92;
  } else {
    return Math.pow((v + 0.055) / 1.055, 2.4);
  }
};
var linearTosRGB = (value) => {
  let v = Math.max(0, Math.min(1, value));
  if (v <= 31308e-7) {
    return Math.round(v * 12.92 * 255 + 0.5);
  } else {
    return Math.round((1.055 * Math.pow(v, 1 / 2.4) - 0.055) * 255 + 0.5);
  }
};
var sign = (n) => n < 0 ? -1 : 1;
var signPow = (val, exp) => sign(val) * Math.pow(Math.abs(val), exp);

// node_modules/blurhash/dist/esm/error.js
var ValidationError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "ValidationError";
    this.message = message;
  }
};

// node_modules/blurhash/dist/esm/decode.js
var validateBlurhash = (blurhash) => {
  if (!blurhash || blurhash.length < 6) {
    throw new ValidationError("The blurhash string must be at least 6 characters");
  }
  const sizeFlag = decode83(blurhash[0]);
  const numY = Math.floor(sizeFlag / 9) + 1;
  const numX = sizeFlag % 9 + 1;
  if (blurhash.length !== 4 + 2 * numX * numY) {
    throw new ValidationError(`blurhash length mismatch: length is ${blurhash.length} but it should be ${4 + 2 * numX * numY}`);
  }
};
var decodeDC = (value) => {
  const intR = value >> 16;
  const intG = value >> 8 & 255;
  const intB = value & 255;
  return [sRGBToLinear(intR), sRGBToLinear(intG), sRGBToLinear(intB)];
};
var decodeAC = (value, maximumValue) => {
  const quantR = Math.floor(value / (19 * 19));
  const quantG = Math.floor(value / 19) % 19;
  const quantB = value % 19;
  const rgb = [
    signPow((quantR - 9) / 9, 2) * maximumValue,
    signPow((quantG - 9) / 9, 2) * maximumValue,
    signPow((quantB - 9) / 9, 2) * maximumValue
  ];
  return rgb;
};
var decode = (blurhash, width, height, punch) => {
  validateBlurhash(blurhash);
  punch = punch | 1;
  const sizeFlag = decode83(blurhash[0]);
  const numY = Math.floor(sizeFlag / 9) + 1;
  const numX = sizeFlag % 9 + 1;
  const quantisedMaximumValue = decode83(blurhash[1]);
  const maximumValue = (quantisedMaximumValue + 1) / 166;
  const colors = new Array(numX * numY);
  for (let i = 0; i < colors.length; i++) {
    if (i === 0) {
      const value = decode83(blurhash.substring(2, 6));
      colors[i] = decodeDC(value);
    } else {
      const value = decode83(blurhash.substring(4 + i * 2, 6 + i * 2));
      colors[i] = decodeAC(value, maximumValue * punch);
    }
  }
  const bytesPerRow = width * 4;
  const pixels = new Uint8ClampedArray(bytesPerRow * height);
  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      let r = 0;
      let g = 0;
      let b = 0;
      for (let j = 0; j < numY; j++) {
        for (let i = 0; i < numX; i++) {
          const basis = Math.cos(Math.PI * x * i / width) * Math.cos(Math.PI * y * j / height);
          let color = colors[i + j * numX];
          r += color[0] * basis;
          g += color[1] * basis;
          b += color[2] * basis;
        }
      }
      let intR = linearTosRGB(r);
      let intG = linearTosRGB(g);
      let intB = linearTosRGB(b);
      pixels[4 * x + 0 + y * bytesPerRow] = intR;
      pixels[4 * x + 1 + y * bytesPerRow] = intG;
      pixels[4 * x + 2 + y * bytesPerRow] = intB;
      pixels[4 * x + 3 + y * bytesPerRow] = 255;
    }
  }
  return pixels;
};
var decode_default = decode;

// node_modules/react-blurhash/es/BlurhashCanvas.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var BlurhashCanvas = function(_super) {
  __extends(BlurhashCanvas2, _super);
  function BlurhashCanvas2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.canvas = null;
    _this.handleRef = function(canvas) {
      _this.canvas = canvas;
      _this.draw();
    };
    _this.draw = function() {
      var _a = _this.props, hash = _a.hash, height = _a.height, punch = _a.punch, width = _a.width;
      if (_this.canvas) {
        var pixels = decode_default(hash, width, height, punch);
        var ctx = _this.canvas.getContext("2d");
        var imageData = ctx.createImageData(width, height);
        imageData.data.set(pixels);
        ctx.putImageData(imageData, 0, 0);
      }
    };
    return _this;
  }
  BlurhashCanvas2.prototype.componentDidUpdate = function() {
    this.draw();
  };
  BlurhashCanvas2.prototype.render = function() {
    var _a = this.props, hash = _a.hash, height = _a.height, width = _a.width, rest = __rest(_a, ["hash", "height", "width"]);
    return React.createElement("canvas", __assign({}, rest, { height, width, ref: this.handleRef }));
  };
  BlurhashCanvas2.defaultProps = {
    height: 128,
    width: 128
  };
  return BlurhashCanvas2;
}(React.PureComponent);
var BlurhashCanvas_default = BlurhashCanvas;

// node_modules/react-blurhash/es/Blurhash.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var canvasStyle = {
  position: "absolute",
  top: 0,
  bottom: 0,
  left: 0,
  right: 0,
  width: "100%",
  height: "100%"
};
var Blurhash = function(_super) {
  __extends2(Blurhash2, _super);
  function Blurhash2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Blurhash2.prototype.componentDidUpdate = function() {
    if (this.props.resolutionX <= 0) {
      throw new Error("resolutionX must be larger than zero");
    }
    if (this.props.resolutionY <= 0) {
      throw new Error("resolutionY must be larger than zero");
    }
  };
  Blurhash2.prototype.render = function() {
    var _a = this.props, hash = _a.hash, height = _a.height, width = _a.width, punch = _a.punch, resolutionX = _a.resolutionX, resolutionY = _a.resolutionY, style = _a.style, rest = __rest2(_a, ["hash", "height", "width", "punch", "resolutionX", "resolutionY", "style"]);
    return React2.createElement("div", __assign2({}, rest, { style: __assign2(__assign2({ display: "inline-block", height, width }, style), { position: "relative" }) }), React2.createElement(BlurhashCanvas_default, { hash, height: resolutionY, width: resolutionX, punch, style: canvasStyle }));
  };
  Blurhash2.defaultProps = {
    height: 128,
    width: 128,
    resolutionX: 32,
    resolutionY: 32
  };
  return Blurhash2;
}(React2.PureComponent);
var Blurhash_default = Blurhash;
export {
  Blurhash_default as Blurhash,
  BlurhashCanvas_default as BlurhashCanvas
};
//# sourceMappingURL=react-blurhash.js.map
